#!/usr/bin/env python3

""" Viki

Webhook reciever and automation framework

Usage:
    jobs
    job/<jobName>
    job/<jobName>/run

Maintainer:
    John Shanahan <shanahan.jrs@gmail.com>

License:
    Apache 2.0
    http://www.apache.org/licenses/LICENSE-2.0

Todo:
    - Add logging (replace the print statements with actual logging)
    - Add Auth
    - Make individual built dirs under .../jobs/<jobName>/<buildNumber>
    - Add funcs to count lastSuccessfulRun and lastFailedRun
    - Add Redis support
    - Create a routes file for all the api endpoints to be structured/organized

"""

## Imports

try:
    from flask import Flask, request, jsonify
    from lib.jobs import Jobs
    import json
    import redis
except ImportError as error:
    exit('ImportError: ' + str(error))


## Setup

app = Flask(__name__)
job = Jobs()
redisconn = redis.Redis(
    host="localhost",
    port=8888,
    password="vikiredis"
)

homeDirectory = "/usr/local/viki"

debug = True


## Routes

@app.route("/")
def root():
    """ Home """
    return jsonify({"name":"viki", "version":"0.0.1"})

@app.route("/jobs")
def jobs():
    """ List all jobs """

    ret =  jsonify(job.getJobs())

    return ret

@app.route("/job/<string:jobName>", methods = ['GET', 'POST', 'PUT', 'DELETE'])
def getJob(jobName):
    """ Show single job details by name """
    ret = None

    if request.method == 'GET':
        # Retrieve a jobs details
        ret = job.getJobByName(jobName)

    if request.method == 'POST':
        # Requires "application/json" mime type and valid JSON body
        # containing description, and steps
        jobConfig = str(request.get_json())
        ret = job.createJob(jobName, jobConfig)

    if request.method == 'PUT':
        # Requires "application/json" mime type and valid JSON body
        # containing field/s to be updated
        ret = job.updateJob(jobName)

    if request.method == 'DELETE':
        # Deletes a job from the repository
        ret = job.deleteJob(jobName)

    if ret is None:
        ret = {"success":0, "message":"Failed"}

    return jsonify(ret)

@app.route("/job/<string:jobName>/run")
def runJob(jobName):
    """ Run specific job by name """
    return jsonify(job.runJob(jobName))



## Main

if __name__ == "__main__":

    if debug:
        app.debug = True

    app.run()